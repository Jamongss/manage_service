#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""program"""
__author__ = "Jamongss"
__date__ = "2025-08-19"
__last_modified_by__ = "Jamongss"
__last_modified_date__ = "2025-10-17"
__maintainer__ = "Jamongss"

###########
# imports #
###########
import os
import sys
import traceback
from cfg.config import MonitorConfig
from lib.logger import get_timed_rotating_logger
from lib.control_svctl import Svctl
from lib.check_docker import CheckDocker
from lib.check_process import CheckProcess


###################
# global variable #
###################
manage_root = os.path.dirname(os.path.abspath(__file__))
major = sys.version_info.major
minor = sys.version_info.minor
micro = sys.version_info.micro

#########
# class #
#########
class MonitorService:
    def __init__(self):
        self.py_version = major
        self.log = get_timed_rotating_logger(
            logger_name=MonitorConfig.logger_name,
            log_dir_path=os.path.join(manage_root, MonitorConfig.log_dir_path),
            log_file_name=MonitorConfig.log_file_name,
            backup_count=MonitorConfig.backup_count,
            log_level=MonitorConfig.log_level
        )
        self.log.info("Python {}.{}.{}".format(major, minor, micro))

    def run(self):
        try:
            total_count = 0     # type: int
            check_count = 0     # type: int
            err_count = 0       # type: int

            c_svctl = Svctl(
                self.log,
                svc_list=MonitorConfig.check_service_list,
                py_ver=self.py_version,
                total_cnt=total_count,
                check_cnt=check_count,
                err_cnt=err_count,
            )
            total_cnt, check_cnt, err_cnt = c_svctl.check_status()

            c_docker = CheckDocker(
                self.log,
                container_list=MonitorConfig.check_engine_list,
                py_ver=self.py_version,
                total_cnt=total_cnt,
                check_cnt=check_cnt,
                err_cnt=err_cnt,
            )
            total_cnt, check_cnt, err_cnt = c_docker.run()

            c_process = CheckProcess(
                self.log,
                proc_list=MonitorConfig.check_process_list,
                total_cnt=total_cnt,
                check_cnt=check_cnt,
                err_cnt=err_cnt,
            )
            total_cnt, check_cnt, err_cnt = c_process.run()

            self.log.info('=' * 78)
            self.log.info("대상 서비스 개수 : {}".format(total_cnt))
            self.log.info("정상 실행 중인 서비스 개수 : {}".format(check_cnt))
            if err_cnt == 0:
                self.log.info("비정상 실행 중인 서비스 개수 : {}".format(err_cnt))
            else:
                self.log.error("비정상 실행 중인 서비스 개수 : {}".format(err_cnt))
            self.log.info('=' * 78)
        except Exception:
            self.log.error(traceback.format_exc())
            sys.exit(1)


if __name__ == "__main__":
    monitor_service = MonitorService()
    monitor_service.run()

